webpackJsonp([0x5d4b4a94a562],{356:function(n,s){n.exports={data:{markdownRemark:{html:'<p>This function that returns the value of a query parameter or false when it\'s inexistent.\nThe trick is to track both starting and ending positions of the desired parameter, so that we\'re able to split it from the query and return its value.</p>\n<!--more-->\n<div class="gatsby-highlight" data-language="js">\n      <pre class="language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">getQueryParam</span><span class="token punctuation">(</span>param<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// returns the query parameters portion from the url and gets rid of the ? at position [0]</span>\n\t<span class="token keyword">var</span> query <span class="token operator">=</span> window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>search<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t<span class="token keyword">var</span> startPos <span class="token operator">=</span> query<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>param<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t<span class="token keyword">if</span> <span class="token punctuation">(</span>startPos <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t<span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n\t<span class="token punctuation">}</span>\n\tquery <span class="token operator">=</span> query<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>startPos<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token comment">// checks if the desired param is the last one in the query</span>\n\t<span class="token keyword">if</span> <span class="token punctuation">(</span>query<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">\'&amp;\'</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t<span class="token keyword">var</span> endPos <span class="token operator">=</span> <span class="token punctuation">(</span>query<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">\'&amp;\'</span><span class="token punctuation">,</span> startPos<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">?</span> query<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">\'&amp;\'</span><span class="token punctuation">)</span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span class="token punctuation">:</span> query<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">\'&amp;\'</span><span class="token punctuation">,</span> startPos<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t<span class="token punctuation">}</span>\n\n\t<span class="token keyword">var</span> keyValue <span class="token operator">=</span> query<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>startPos<span class="token punctuation">,</span> endPos<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t<span class="token keyword">return</span> keyValue<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">\'=\'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<p><a href="https://gist.github.com/anazard/a37b997d0bce174656bda9f6faf7f88f">This snippet on Github Gist</a></p>\n<p>And it would be used like this:</p>\n<div class="gatsby-highlight" data-language="js">\n      <pre class="language-js"><code class="language-js"><span class="token comment">// url ~> http://mytestwebsite.com?first=1&amp;second=2</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'First parameter: \'</span> <span class="token operator">+</span> <span class="token function">getQueryParam</span><span class="token punctuation">(</span><span class="token string">\'first\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// 2</span></code></pre>\n      </div>\n<p>This is only of the many ways in which you can implement a similar functionality. Feel free to come up with new ones below!</p>',frontmatter:{date:null,path:"/firstas",title:"[Javascript] Returning query parameters"}}},pathContext:{}}}});
//# sourceMappingURL=path---firstas-dd0f3edcd555f56ecc62.js.map